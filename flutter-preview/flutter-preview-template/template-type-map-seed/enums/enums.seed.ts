import fs from "fs";
import path from "path";

const out = "flutter_enums_ext.dart";

/**
 * These are the enums that are present on api.flutter.dev but not actually available in the flutter sdk.
 */
const blacklist = [
  "widgets/ContextMenuButtonType",
  "widgets/PanAxis",
  "widgets/ScrollDecelerationRate",
  "widgets/SnapshotMode",
  "widgets/WidgetInspectorServiceExtensions",
  "widgets/WidgetsServiceExtensions",
  "foundation/FoundationServiceExtensions",
  "cupertino/CupertinoListSectionType",
  "semantics/Assertiveness",
  "rendering/RenderingServiceExtensions",
  "rendering/SelectionExtendDirection",
  "rendering/TextGranularity",
  "scheduler/SchedulerServiceExtensions",
  "services/ServicesServiceExtensions",
  "dart-ui/DartPerformanceMode",
];

const template_flutter_enum_from_string = (enums: Array<string>) => `
T? flutterEnumFromString<T>(String value) {
${enums
  .map(
    (n) => `
if (T == ${n}) {
  return value.parse${n}() as T;
}
`
  )
  .join("\n")}

  return null as T;
}
`;

const template_is_flutter_enum = (enums: Array<string>) => `
bool isFlutterEmum(Type type) {
  return ${enums.map((n) => `type == ${n}`).join(" ||\n")};
}
`;

const template_ext = (name: string) => `
${name} parse${name}(){
  return ${name}.values
    .firstWhere((e) => e.toString() == '${name}.' + this);
}
`;

const template = ({
  flutterEnumFromString,
  isFlutterEnum,
  exts,
}: {
  flutterEnumFromString: string;
  isFlutterEnum: string;
  exts: Array<string>;
}) => `// ignore_for_file: uri_does_not_exist,undefined_class,undefined_identifier,type_test_with_undefined_name

/// 
/// This file is generated by template-type-map-seed/enums/enums.seed.ts
/// Do not edit manually.
/// 

import 'package:flutter/animation.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'dart:ui';
// import 'dart:wasm';
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:core';
import 'dart:developer';
import 'dart:math';
import 'dart:typed_data';
// import 'dart:ffi';
import 'dart:io';
import 'dart:isolate';
import 'dart:html';
import 'dart:js';
import 'dart:js_util';


${flutterEnumFromString}

${isFlutterEnum}

extension StringExtensionForEnums on String {
${exts.map((ext) => ext.split("\n").join("\n  ")).join("\n")}
}
`;

function main() {
  const enum_meta = require("../../../../flutter-docs/enums/enums.json");

  const metas = enum_meta.filter(({ id }) => !blacklist.includes(id));

  const exts = metas.map(({ name, values }) => {
    return template_ext(name);
  });

  const is_flutter_enum = template_is_flutter_enum(
    metas.map(({ name }) => name)
  );

  const flutter_enum_from_string = template_flutter_enum_from_string(
    metas.map(({ name }) => name)
  );

  const output = template({
    flutterEnumFromString: flutter_enum_from_string,
    isFlutterEnum: is_flutter_enum,
    exts: exts,
  });

  fs.writeFileSync(path.join(__dirname, out), output, {
    encoding: "utf-8",
  });
}

main();
