///
/// This file is generated by template-type-map-seed/enums/enums.seed.ts
/// Do not edit manually.
///

import 'package:flutter/animation.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/semantics.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'dart:ui';
// import 'dart:wasm';
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:core';
import 'dart:developer';
import 'dart:math';
import 'dart:typed_data';
// import 'dart:ffi';
import 'dart:io';
import 'dart:isolate';
import 'dart:html';
import 'dart:js';
import 'dart:js_util';

T? flutterEnumFromString<T>(String value) {
  if (T == AnimationBehavior) {
    return value.parseAnimationBehavior() as T;
  }

  if (T == AnimationStatus) {
    return value.parseAnimationStatus() as T;
  }

  if (T == AndroidOverscrollIndicator) {
    return value.parseAndroidOverscrollIndicator() as T;
  }

  if (T == AppLifecycleState) {
    return value.parseAppLifecycleState() as T;
  }

  if (T == AutofillContextAction) {
    return value.parseAutofillContextAction() as T;
  }

  if (T == AutovalidateMode) {
    return value.parseAutovalidateMode() as T;
  }

  if (T == Axis) {
    return value.parseAxis() as T;
  }

  if (T == AxisDirection) {
    return value.parseAxisDirection() as T;
  }

  if (T == BannerLocation) {
    return value.parseBannerLocation() as T;
  }

  if (T == BlendMode) {
    return value.parseBlendMode() as T;
  }

  if (T == BlurStyle) {
    return value.parseBlurStyle() as T;
  }

  if (T == BorderStyle) {
    return value.parseBorderStyle() as T;
  }

  if (T == BoxFit) {
    return value.parseBoxFit() as T;
  }

  if (T == BoxShape) {
    return value.parseBoxShape() as T;
  }

  if (T == Brightness) {
    return value.parseBrightness() as T;
  }

  if (T == Clip) {
    return value.parseClip() as T;
  }

  if (T == ClipboardStatus) {
    return value.parseClipboardStatus() as T;
  }

  if (T == ConnectionState) {
    return value.parseConnectionState() as T;
  }

  if (T == CrossAxisAlignment) {
    return value.parseCrossAxisAlignment() as T;
  }

  if (T == CrossFadeState) {
    return value.parseCrossFadeState() as T;
  }

  if (T == CupertinoDatePickerMode) {
    return value.parseCupertinoDatePickerMode() as T;
  }

  if (T == CupertinoTimerPickerMode) {
    return value.parseCupertinoTimerPickerMode() as T;
  }

  if (T == CupertinoUserInterfaceLevelData) {
    return value.parseCupertinoUserInterfaceLevelData() as T;
  }

  if (T == DatePickerDateOrder) {
    return value.parseDatePickerDateOrder() as T;
  }

  if (T == DatePickerDateTimeOrder) {
    return value.parseDatePickerDateTimeOrder() as T;
  }

  if (T == DecorationPosition) {
    return value.parseDecorationPosition() as T;
  }

  if (T == DiagnosticLevel) {
    return value.parseDiagnosticLevel() as T;
  }

  if (T == DismissDirection) {
    return value.parseDismissDirection() as T;
  }

  if (T == FilterQuality) {
    return value.parseFilterQuality() as T;
  }

  if (T == FlexFit) {
    return value.parseFlexFit() as T;
  }

  if (T == FlutterLogoStyle) {
    return value.parseFlutterLogoStyle() as T;
  }

  if (T == FocusHighlightMode) {
    return value.parseFocusHighlightMode() as T;
  }

  if (T == FocusHighlightStrategy) {
    return value.parseFocusHighlightStrategy() as T;
  }

  if (T == FontStyle) {
    return value.parseFontStyle() as T;
  }

  if (T == GrowthDirection) {
    return value.parseGrowthDirection() as T;
  }

  if (T == HeroFlightDirection) {
    return value.parseHeroFlightDirection() as T;
  }

  if (T == HitTestBehavior) {
    return value.parseHitTestBehavior() as T;
  }

  if (T == ImageRepeat) {
    return value.parseImageRepeat() as T;
  }

  if (T == KeyEventResult) {
    return value.parseKeyEventResult() as T;
  }

  if (T == MainAxisAlignment) {
    return value.parseMainAxisAlignment() as T;
  }

  if (T == MainAxisSize) {
    return value.parseMainAxisSize() as T;
  }

  if (T == NavigationMode) {
    return value.parseNavigationMode() as T;
  }

  if (T == Orientation) {
    return value.parseOrientation() as T;
  }

  if (T == OverflowBarAlignment) {
    return value.parseOverflowBarAlignment() as T;
  }

  if (T == OverlayVisibilityMode) {
    return value.parseOverlayVisibilityMode() as T;
  }

  if (T == PaintingStyle) {
    return value.parsePaintingStyle() as T;
  }

  if (T == PathFillType) {
    return value.parsePathFillType() as T;
  }

  if (T == PathOperation) {
    return value.parsePathOperation() as T;
  }

  if (T == PlaceholderAlignment) {
    return value.parsePlaceholderAlignment() as T;
  }

  if (T == PlatformProvidedMenuItemType) {
    return value.parsePlatformProvidedMenuItemType() as T;
  }

  if (T == RefreshIndicatorMode) {
    return value.parseRefreshIndicatorMode() as T;
  }

  if (T == RenderComparison) {
    return value.parseRenderComparison() as T;
  }

  if (T == RouteInformationReportingType) {
    return value.parseRouteInformationReportingType() as T;
  }

  if (T == RoutePopDisposition) {
    return value.parseRoutePopDisposition() as T;
  }

  if (T == ScrollbarOrientation) {
    return value.parseScrollbarOrientation() as T;
  }

  if (T == ScrollIncrementType) {
    return value.parseScrollIncrementType() as T;
  }

  if (T == ScrollPositionAlignmentPolicy) {
    return value.parseScrollPositionAlignmentPolicy() as T;
  }

  if (T == ScrollViewKeyboardDismissBehavior) {
    return value.parseScrollViewKeyboardDismissBehavior() as T;
  }

  if (T == SelectionChangedCause) {
    return value.parseSelectionChangedCause() as T;
  }

  if (T == SmartDashesType) {
    return value.parseSmartDashesType() as T;
  }

  if (T == SmartQuotesType) {
    return value.parseSmartQuotesType() as T;
  }

  if (T == StackFit) {
    return value.parseStackFit() as T;
  }

  if (T == StrokeCap) {
    return value.parseStrokeCap() as T;
  }

  if (T == StrokeJoin) {
    return value.parseStrokeJoin() as T;
  }

  if (T == TableCellVerticalAlignment) {
    return value.parseTableCellVerticalAlignment() as T;
  }

  if (T == TargetPlatform) {
    return value.parseTargetPlatform() as T;
  }

  if (T == TextAffinity) {
    return value.parseTextAffinity() as T;
  }

  if (T == TextAlign) {
    return value.parseTextAlign() as T;
  }

  if (T == TextBaseline) {
    return value.parseTextBaseline() as T;
  }

  if (T == TextCapitalization) {
    return value.parseTextCapitalization() as T;
  }

  if (T == TextDecorationStyle) {
    return value.parseTextDecorationStyle() as T;
  }

  if (T == TextDirection) {
    return value.parseTextDirection() as T;
  }

  if (T == TextInputAction) {
    return value.parseTextInputAction() as T;
  }

  if (T == TextLeadingDistribution) {
    return value.parseTextLeadingDistribution() as T;
  }

  if (T == TextOverflow) {
    return value.parseTextOverflow() as T;
  }

  if (T == TextSelectionHandleType) {
    return value.parseTextSelectionHandleType() as T;
  }

  if (T == TextWidthBasis) {
    return value.parseTextWidthBasis() as T;
  }

  if (T == TileMode) {
    return value.parseTileMode() as T;
  }

  if (T == TraversalDirection) {
    return value.parseTraversalDirection() as T;
  }

  if (T == UnfocusDisposition) {
    return value.parseUnfocusDisposition() as T;
  }

  if (T == VertexMode) {
    return value.parseVertexMode() as T;
  }

  if (T == VerticalDirection) {
    return value.parseVerticalDirection() as T;
  }

  if (T == WrapAlignment) {
    return value.parseWrapAlignment() as T;
  }

  if (T == WrapCrossAlignment) {
    return value.parseWrapCrossAlignment() as T;
  }

  if (T == DiagnosticsTreeStyle) {
    return value.parseDiagnosticsTreeStyle() as T;
  }

  if (T == DragStartBehavior) {
    return value.parseDragStartBehavior() as T;
  }

  if (T == GestureDisposition) {
    return value.parseGestureDisposition() as T;
  }

  if (T == GestureRecognizerState) {
    return value.parseGestureRecognizerState() as T;
  }

  if (T == PointerDeviceKind) {
    return value.parsePointerDeviceKind() as T;
  }

  if (T == BottomNavigationBarLandscapeLayout) {
    return value.parseBottomNavigationBarLandscapeLayout() as T;
  }

  if (T == BottomNavigationBarType) {
    return value.parseBottomNavigationBarType() as T;
  }

  if (T == ButtonBarLayoutBehavior) {
    return value.parseButtonBarLayoutBehavior() as T;
  }

  if (T == ButtonTextTheme) {
    return value.parseButtonTextTheme() as T;
  }

  if (T == CollapseMode) {
    return value.parseCollapseMode() as T;
  }

  if (T == DatePickerEntryMode) {
    return value.parseDatePickerEntryMode() as T;
  }

  if (T == DatePickerMode) {
    return value.parseDatePickerMode() as T;
  }

  if (T == DayPeriod) {
    return value.parseDayPeriod() as T;
  }

  if (T == DrawerAlignment) {
    return value.parseDrawerAlignment() as T;
  }

  if (T == FloatingLabelBehavior) {
    return value.parseFloatingLabelBehavior() as T;
  }

  if (T == HourFormat) {
    return value.parseHourFormat() as T;
  }

  if (T == ListTileControlAffinity) {
    return value.parseListTileControlAffinity() as T;
  }

  if (T == ListTileStyle) {
    return value.parseListTileStyle() as T;
  }

  if (T == MaterialBannerClosedReason) {
    return value.parseMaterialBannerClosedReason() as T;
  }

  if (T == MaterialState) {
    return value.parseMaterialState() as T;
  }

  if (T == MaterialTapTargetSize) {
    return value.parseMaterialTapTargetSize() as T;
  }

  if (T == MaterialType) {
    return value.parseMaterialType() as T;
  }

  if (T == NavigationDestinationLabelBehavior) {
    return value.parseNavigationDestinationLabelBehavior() as T;
  }

  if (T == NavigationRailLabelType) {
    return value.parseNavigationRailLabelType() as T;
  }

  if (T == PopupMenuPosition) {
    return value.parsePopupMenuPosition() as T;
  }

  if (T == RefreshIndicatorTriggerMode) {
    return value.parseRefreshIndicatorTriggerMode() as T;
  }

  if (T == ScriptCategory) {
    return value.parseScriptCategory() as T;
  }

  if (T == ShowValueIndicator) {
    return value.parseShowValueIndicator() as T;
  }

  if (T == SnackBarBehavior) {
    return value.parseSnackBarBehavior() as T;
  }

  if (T == SnackBarClosedReason) {
    return value.parseSnackBarClosedReason() as T;
  }

  if (T == StepperType) {
    return value.parseStepperType() as T;
  }

  if (T == StepState) {
    return value.parseStepState() as T;
  }

  if (T == StretchMode) {
    return value.parseStretchMode() as T;
  }

  if (T == TabBarIndicatorSize) {
    return value.parseTabBarIndicatorSize() as T;
  }

  if (T == ThemeMode) {
    return value.parseThemeMode() as T;
  }

  if (T == Thumb) {
    return value.parseThumb() as T;
  }

  if (T == TimeOfDayFormat) {
    return value.parseTimeOfDayFormat() as T;
  }

  if (T == TimePickerEntryMode) {
    return value.parseTimePickerEntryMode() as T;
  }

  if (T == TooltipTriggerMode) {
    return value.parseTooltipTriggerMode() as T;
  }

  if (T == SpringType) {
    return value.parseSpringType() as T;
  }

  if (T == CacheExtentStyle) {
    return value.parseCacheExtentStyle() as T;
  }

  if (T == DebugSemanticsDumpOrder) {
    return value.parseDebugSemanticsDumpOrder() as T;
  }

  if (T == PerformanceOverlayOption) {
    return value.parsePerformanceOverlayOption() as T;
  }

  if (T == PlatformViewHitTestBehavior) {
    return value.parsePlatformViewHitTestBehavior() as T;
  }

  if (T == RenderAnimatedSizeState) {
    return value.parseRenderAnimatedSizeState() as T;
  }

  if (T == ScrollDirection) {
    return value.parseScrollDirection() as T;
  }

  if (T == SelectionEventType) {
    return value.parseSelectionEventType() as T;
  }

  if (T == SelectionResult) {
    return value.parseSelectionResult() as T;
  }

  if (T == SelectionStatus) {
    return value.parseSelectionStatus() as T;
  }

  if (T == SchedulerPhase) {
    return value.parseSchedulerPhase() as T;
  }

  if (T == DeviceOrientation) {
    return value.parseDeviceOrientation() as T;
  }

  if (T == FloatingCursorDragState) {
    return value.parseFloatingCursorDragState() as T;
  }

  if (T == KeyboardSide) {
    return value.parseKeyboardSide() as T;
  }

  if (T == KeyDataTransitMode) {
    return value.parseKeyDataTransitMode() as T;
  }

  if (T == MaxLengthEnforcement) {
    return value.parseMaxLengthEnforcement() as T;
  }

  if (T == ModifierKey) {
    return value.parseModifierKey() as T;
  }

  if (T == SystemSoundType) {
    return value.parseSystemSoundType() as T;
  }

  if (T == SystemUiMode) {
    return value.parseSystemUiMode() as T;
  }

  if (T == SystemUiOverlay) {
    return value.parseSystemUiOverlay() as T;
  }

  if (T == BoxHeightStyle) {
    return value.parseBoxHeightStyle() as T;
  }

  if (T == BoxWidthStyle) {
    return value.parseBoxWidthStyle() as T;
  }

  if (T == ClipOp) {
    return value.parseClipOp() as T;
  }

  if (T == DisplayFeatureState) {
    return value.parseDisplayFeatureState() as T;
  }

  if (T == DisplayFeatureType) {
    return value.parseDisplayFeatureType() as T;
  }

  if (T == FramePhase) {
    return value.parseFramePhase() as T;
  }

  if (T == ImageByteFormat) {
    return value.parseImageByteFormat() as T;
  }

  if (T == KeyEventType) {
    return value.parseKeyEventType() as T;
  }

  if (T == PixelFormat) {
    return value.parsePixelFormat() as T;
  }

  if (T == PointerChange) {
    return value.parsePointerChange() as T;
  }

  if (T == PointerSignalKind) {
    return value.parsePointerSignalKind() as T;
  }

  if (T == PointMode) {
    return value.parsePointMode() as T;
  }

  if (T == HttpClientResponseCompressionState) {
    return value.parseHttpClientResponseCompressionState() as T;
  }

  return null as T;
}

bool isFlutterEmum(Type type) {
  return type == AnimationBehavior ||
      type == AnimationStatus ||
      type == AndroidOverscrollIndicator ||
      type == AppLifecycleState ||
      type == AutofillContextAction ||
      type == AutovalidateMode ||
      type == Axis ||
      type == AxisDirection ||
      type == BannerLocation ||
      type == BlendMode ||
      type == BlurStyle ||
      type == BorderStyle ||
      type == BoxFit ||
      type == BoxShape ||
      type == Brightness ||
      type == Clip ||
      type == ClipboardStatus ||
      type == ConnectionState ||
      type == CrossAxisAlignment ||
      type == CrossFadeState ||
      type == CupertinoDatePickerMode ||
      type == CupertinoTimerPickerMode ||
      type == CupertinoUserInterfaceLevelData ||
      type == DatePickerDateOrder ||
      type == DatePickerDateTimeOrder ||
      type == DecorationPosition ||
      type == DiagnosticLevel ||
      type == DismissDirection ||
      type == FilterQuality ||
      type == FlexFit ||
      type == FlutterLogoStyle ||
      type == FocusHighlightMode ||
      type == FocusHighlightStrategy ||
      type == FontStyle ||
      type == GrowthDirection ||
      type == HeroFlightDirection ||
      type == HitTestBehavior ||
      type == ImageRepeat ||
      type == KeyEventResult ||
      type == MainAxisAlignment ||
      type == MainAxisSize ||
      type == NavigationMode ||
      type == Orientation ||
      type == OverflowBarAlignment ||
      type == OverlayVisibilityMode ||
      type == PaintingStyle ||
      type == PathFillType ||
      type == PathOperation ||
      type == PlaceholderAlignment ||
      type == PlatformProvidedMenuItemType ||
      type == RefreshIndicatorMode ||
      type == RenderComparison ||
      type == RouteInformationReportingType ||
      type == RoutePopDisposition ||
      type == ScrollbarOrientation ||
      type == ScrollIncrementType ||
      type == ScrollPositionAlignmentPolicy ||
      type == ScrollViewKeyboardDismissBehavior ||
      type == SelectionChangedCause ||
      type == SmartDashesType ||
      type == SmartQuotesType ||
      type == StackFit ||
      type == StrokeCap ||
      type == StrokeJoin ||
      type == TableCellVerticalAlignment ||
      type == TargetPlatform ||
      type == TextAffinity ||
      type == TextAlign ||
      type == TextBaseline ||
      type == TextCapitalization ||
      type == TextDecorationStyle ||
      type == TextDirection ||
      type == TextInputAction ||
      type == TextLeadingDistribution ||
      type == TextOverflow ||
      type == TextSelectionHandleType ||
      type == TextWidthBasis ||
      type == TileMode ||
      type == TraversalDirection ||
      type == UnfocusDisposition ||
      type == VertexMode ||
      type == VerticalDirection ||
      type == WrapAlignment ||
      type == WrapCrossAlignment ||
      type == DiagnosticsTreeStyle ||
      type == DragStartBehavior ||
      type == GestureDisposition ||
      type == GestureRecognizerState ||
      type == PointerDeviceKind ||
      type == BottomNavigationBarLandscapeLayout ||
      type == BottomNavigationBarType ||
      type == ButtonBarLayoutBehavior ||
      type == ButtonTextTheme ||
      type == CollapseMode ||
      type == DatePickerEntryMode ||
      type == DatePickerMode ||
      type == DayPeriod ||
      type == DrawerAlignment ||
      type == FloatingLabelBehavior ||
      type == HourFormat ||
      type == ListTileControlAffinity ||
      type == ListTileStyle ||
      type == MaterialBannerClosedReason ||
      type == MaterialState ||
      type == MaterialTapTargetSize ||
      type == MaterialType ||
      type == NavigationDestinationLabelBehavior ||
      type == NavigationRailLabelType ||
      type == PopupMenuPosition ||
      type == RefreshIndicatorTriggerMode ||
      type == ScriptCategory ||
      type == ShowValueIndicator ||
      type == SnackBarBehavior ||
      type == SnackBarClosedReason ||
      type == StepperType ||
      type == StepState ||
      type == StretchMode ||
      type == TabBarIndicatorSize ||
      type == ThemeMode ||
      type == Thumb ||
      type == TimeOfDayFormat ||
      type == TimePickerEntryMode ||
      type == TooltipTriggerMode ||
      type == SpringType ||
      type == CacheExtentStyle ||
      type == DebugSemanticsDumpOrder ||
      type == PerformanceOverlayOption ||
      type == PlatformViewHitTestBehavior ||
      type == RenderAnimatedSizeState ||
      type == ScrollDirection ||
      type == SelectionEventType ||
      type == SelectionResult ||
      type == SelectionStatus ||
      type == SchedulerPhase ||
      type == DeviceOrientation ||
      type == FloatingCursorDragState ||
      type == KeyboardSide ||
      type == KeyDataTransitMode ||
      type == MaxLengthEnforcement ||
      type == ModifierKey ||
      type == SystemSoundType ||
      type == SystemUiMode ||
      type == SystemUiOverlay ||
      type == BoxHeightStyle ||
      type == BoxWidthStyle ||
      type == ClipOp ||
      type == DisplayFeatureState ||
      type == DisplayFeatureType ||
      type == FramePhase ||
      type == ImageByteFormat ||
      type == KeyEventType ||
      type == PixelFormat ||
      type == PointerChange ||
      type == PointerSignalKind ||
      type == PointMode ||
      type == HttpClientResponseCompressionState;
}

extension StringExtensionForEnums on String {
  AnimationBehavior parseAnimationBehavior() {
    return AnimationBehavior.values
        .firstWhere((e) => e.toString() == 'AnimationBehavior.' + this);
  }

  AnimationStatus parseAnimationStatus() {
    return AnimationStatus.values
        .firstWhere((e) => e.toString() == 'AnimationStatus.' + this);
  }

  AndroidOverscrollIndicator parseAndroidOverscrollIndicator() {
    return AndroidOverscrollIndicator.values.firstWhere(
        (e) => e.toString() == 'AndroidOverscrollIndicator.' + this);
  }

  AppLifecycleState parseAppLifecycleState() {
    return AppLifecycleState.values
        .firstWhere((e) => e.toString() == 'AppLifecycleState.' + this);
  }

  AutofillContextAction parseAutofillContextAction() {
    return AutofillContextAction.values
        .firstWhere((e) => e.toString() == 'AutofillContextAction.' + this);
  }

  AutovalidateMode parseAutovalidateMode() {
    return AutovalidateMode.values
        .firstWhere((e) => e.toString() == 'AutovalidateMode.' + this);
  }

  Axis parseAxis() {
    return Axis.values.firstWhere((e) => e.toString() == 'Axis.' + this);
  }

  AxisDirection parseAxisDirection() {
    return AxisDirection.values
        .firstWhere((e) => e.toString() == 'AxisDirection.' + this);
  }

  BannerLocation parseBannerLocation() {
    return BannerLocation.values
        .firstWhere((e) => e.toString() == 'BannerLocation.' + this);
  }

  BlendMode parseBlendMode() {
    return BlendMode.values
        .firstWhere((e) => e.toString() == 'BlendMode.' + this);
  }

  BlurStyle parseBlurStyle() {
    return BlurStyle.values
        .firstWhere((e) => e.toString() == 'BlurStyle.' + this);
  }

  BorderStyle parseBorderStyle() {
    return BorderStyle.values
        .firstWhere((e) => e.toString() == 'BorderStyle.' + this);
  }

  BoxFit parseBoxFit() {
    return BoxFit.values.firstWhere((e) => e.toString() == 'BoxFit.' + this);
  }

  BoxShape parseBoxShape() {
    return BoxShape.values
        .firstWhere((e) => e.toString() == 'BoxShape.' + this);
  }

  Brightness parseBrightness() {
    return Brightness.values
        .firstWhere((e) => e.toString() == 'Brightness.' + this);
  }

  Clip parseClip() {
    return Clip.values.firstWhere((e) => e.toString() == 'Clip.' + this);
  }

  ClipboardStatus parseClipboardStatus() {
    return ClipboardStatus.values
        .firstWhere((e) => e.toString() == 'ClipboardStatus.' + this);
  }

  ConnectionState parseConnectionState() {
    return ConnectionState.values
        .firstWhere((e) => e.toString() == 'ConnectionState.' + this);
  }

  CrossAxisAlignment parseCrossAxisAlignment() {
    return CrossAxisAlignment.values
        .firstWhere((e) => e.toString() == 'CrossAxisAlignment.' + this);
  }

  CrossFadeState parseCrossFadeState() {
    return CrossFadeState.values
        .firstWhere((e) => e.toString() == 'CrossFadeState.' + this);
  }

  CupertinoDatePickerMode parseCupertinoDatePickerMode() {
    return CupertinoDatePickerMode.values
        .firstWhere((e) => e.toString() == 'CupertinoDatePickerMode.' + this);
  }

  CupertinoTimerPickerMode parseCupertinoTimerPickerMode() {
    return CupertinoTimerPickerMode.values
        .firstWhere((e) => e.toString() == 'CupertinoTimerPickerMode.' + this);
  }

  CupertinoUserInterfaceLevelData parseCupertinoUserInterfaceLevelData() {
    return CupertinoUserInterfaceLevelData.values.firstWhere(
        (e) => e.toString() == 'CupertinoUserInterfaceLevelData.' + this);
  }

  DatePickerDateOrder parseDatePickerDateOrder() {
    return DatePickerDateOrder.values
        .firstWhere((e) => e.toString() == 'DatePickerDateOrder.' + this);
  }

  DatePickerDateTimeOrder parseDatePickerDateTimeOrder() {
    return DatePickerDateTimeOrder.values
        .firstWhere((e) => e.toString() == 'DatePickerDateTimeOrder.' + this);
  }

  DecorationPosition parseDecorationPosition() {
    return DecorationPosition.values
        .firstWhere((e) => e.toString() == 'DecorationPosition.' + this);
  }

  DiagnosticLevel parseDiagnosticLevel() {
    return DiagnosticLevel.values
        .firstWhere((e) => e.toString() == 'DiagnosticLevel.' + this);
  }

  DismissDirection parseDismissDirection() {
    return DismissDirection.values
        .firstWhere((e) => e.toString() == 'DismissDirection.' + this);
  }

  FilterQuality parseFilterQuality() {
    return FilterQuality.values
        .firstWhere((e) => e.toString() == 'FilterQuality.' + this);
  }

  FlexFit parseFlexFit() {
    return FlexFit.values.firstWhere((e) => e.toString() == 'FlexFit.' + this);
  }

  FlutterLogoStyle parseFlutterLogoStyle() {
    return FlutterLogoStyle.values
        .firstWhere((e) => e.toString() == 'FlutterLogoStyle.' + this);
  }

  FocusHighlightMode parseFocusHighlightMode() {
    return FocusHighlightMode.values
        .firstWhere((e) => e.toString() == 'FocusHighlightMode.' + this);
  }

  FocusHighlightStrategy parseFocusHighlightStrategy() {
    return FocusHighlightStrategy.values
        .firstWhere((e) => e.toString() == 'FocusHighlightStrategy.' + this);
  }

  FontStyle parseFontStyle() {
    return FontStyle.values
        .firstWhere((e) => e.toString() == 'FontStyle.' + this);
  }

  GrowthDirection parseGrowthDirection() {
    return GrowthDirection.values
        .firstWhere((e) => e.toString() == 'GrowthDirection.' + this);
  }

  HeroFlightDirection parseHeroFlightDirection() {
    return HeroFlightDirection.values
        .firstWhere((e) => e.toString() == 'HeroFlightDirection.' + this);
  }

  HitTestBehavior parseHitTestBehavior() {
    return HitTestBehavior.values
        .firstWhere((e) => e.toString() == 'HitTestBehavior.' + this);
  }

  ImageRepeat parseImageRepeat() {
    return ImageRepeat.values
        .firstWhere((e) => e.toString() == 'ImageRepeat.' + this);
  }

  KeyEventResult parseKeyEventResult() {
    return KeyEventResult.values
        .firstWhere((e) => e.toString() == 'KeyEventResult.' + this);
  }

  MainAxisAlignment parseMainAxisAlignment() {
    return MainAxisAlignment.values
        .firstWhere((e) => e.toString() == 'MainAxisAlignment.' + this);
  }

  MainAxisSize parseMainAxisSize() {
    return MainAxisSize.values
        .firstWhere((e) => e.toString() == 'MainAxisSize.' + this);
  }

  NavigationMode parseNavigationMode() {
    return NavigationMode.values
        .firstWhere((e) => e.toString() == 'NavigationMode.' + this);
  }

  Orientation parseOrientation() {
    return Orientation.values
        .firstWhere((e) => e.toString() == 'Orientation.' + this);
  }

  OverflowBarAlignment parseOverflowBarAlignment() {
    return OverflowBarAlignment.values
        .firstWhere((e) => e.toString() == 'OverflowBarAlignment.' + this);
  }

  OverlayVisibilityMode parseOverlayVisibilityMode() {
    return OverlayVisibilityMode.values
        .firstWhere((e) => e.toString() == 'OverlayVisibilityMode.' + this);
  }

  PaintingStyle parsePaintingStyle() {
    return PaintingStyle.values
        .firstWhere((e) => e.toString() == 'PaintingStyle.' + this);
  }

  PathFillType parsePathFillType() {
    return PathFillType.values
        .firstWhere((e) => e.toString() == 'PathFillType.' + this);
  }

  PathOperation parsePathOperation() {
    return PathOperation.values
        .firstWhere((e) => e.toString() == 'PathOperation.' + this);
  }

  PlaceholderAlignment parsePlaceholderAlignment() {
    return PlaceholderAlignment.values
        .firstWhere((e) => e.toString() == 'PlaceholderAlignment.' + this);
  }

  PlatformProvidedMenuItemType parsePlatformProvidedMenuItemType() {
    return PlatformProvidedMenuItemType.values.firstWhere(
        (e) => e.toString() == 'PlatformProvidedMenuItemType.' + this);
  }

  RefreshIndicatorMode parseRefreshIndicatorMode() {
    return RefreshIndicatorMode.values
        .firstWhere((e) => e.toString() == 'RefreshIndicatorMode.' + this);
  }

  RenderComparison parseRenderComparison() {
    return RenderComparison.values
        .firstWhere((e) => e.toString() == 'RenderComparison.' + this);
  }

  RouteInformationReportingType parseRouteInformationReportingType() {
    return RouteInformationReportingType.values.firstWhere(
        (e) => e.toString() == 'RouteInformationReportingType.' + this);
  }

  RoutePopDisposition parseRoutePopDisposition() {
    return RoutePopDisposition.values
        .firstWhere((e) => e.toString() == 'RoutePopDisposition.' + this);
  }

  ScrollbarOrientation parseScrollbarOrientation() {
    return ScrollbarOrientation.values
        .firstWhere((e) => e.toString() == 'ScrollbarOrientation.' + this);
  }

  ScrollIncrementType parseScrollIncrementType() {
    return ScrollIncrementType.values
        .firstWhere((e) => e.toString() == 'ScrollIncrementType.' + this);
  }

  ScrollPositionAlignmentPolicy parseScrollPositionAlignmentPolicy() {
    return ScrollPositionAlignmentPolicy.values.firstWhere(
        (e) => e.toString() == 'ScrollPositionAlignmentPolicy.' + this);
  }

  ScrollViewKeyboardDismissBehavior parseScrollViewKeyboardDismissBehavior() {
    return ScrollViewKeyboardDismissBehavior.values.firstWhere(
        (e) => e.toString() == 'ScrollViewKeyboardDismissBehavior.' + this);
  }

  SelectionChangedCause parseSelectionChangedCause() {
    return SelectionChangedCause.values
        .firstWhere((e) => e.toString() == 'SelectionChangedCause.' + this);
  }

  SmartDashesType parseSmartDashesType() {
    return SmartDashesType.values
        .firstWhere((e) => e.toString() == 'SmartDashesType.' + this);
  }

  SmartQuotesType parseSmartQuotesType() {
    return SmartQuotesType.values
        .firstWhere((e) => e.toString() == 'SmartQuotesType.' + this);
  }

  StackFit parseStackFit() {
    return StackFit.values
        .firstWhere((e) => e.toString() == 'StackFit.' + this);
  }

  StrokeCap parseStrokeCap() {
    return StrokeCap.values
        .firstWhere((e) => e.toString() == 'StrokeCap.' + this);
  }

  StrokeJoin parseStrokeJoin() {
    return StrokeJoin.values
        .firstWhere((e) => e.toString() == 'StrokeJoin.' + this);
  }

  TableCellVerticalAlignment parseTableCellVerticalAlignment() {
    return TableCellVerticalAlignment.values.firstWhere(
        (e) => e.toString() == 'TableCellVerticalAlignment.' + this);
  }

  TargetPlatform parseTargetPlatform() {
    return TargetPlatform.values
        .firstWhere((e) => e.toString() == 'TargetPlatform.' + this);
  }

  TextAffinity parseTextAffinity() {
    return TextAffinity.values
        .firstWhere((e) => e.toString() == 'TextAffinity.' + this);
  }

  TextAlign parseTextAlign() {
    return TextAlign.values
        .firstWhere((e) => e.toString() == 'TextAlign.' + this);
  }

  TextBaseline parseTextBaseline() {
    return TextBaseline.values
        .firstWhere((e) => e.toString() == 'TextBaseline.' + this);
  }

  TextCapitalization parseTextCapitalization() {
    return TextCapitalization.values
        .firstWhere((e) => e.toString() == 'TextCapitalization.' + this);
  }

  TextDecorationStyle parseTextDecorationStyle() {
    return TextDecorationStyle.values
        .firstWhere((e) => e.toString() == 'TextDecorationStyle.' + this);
  }

  TextDirection parseTextDirection() {
    return TextDirection.values
        .firstWhere((e) => e.toString() == 'TextDirection.' + this);
  }

  TextInputAction parseTextInputAction() {
    return TextInputAction.values
        .firstWhere((e) => e.toString() == 'TextInputAction.' + this);
  }

  TextLeadingDistribution parseTextLeadingDistribution() {
    return TextLeadingDistribution.values
        .firstWhere((e) => e.toString() == 'TextLeadingDistribution.' + this);
  }

  TextOverflow parseTextOverflow() {
    return TextOverflow.values
        .firstWhere((e) => e.toString() == 'TextOverflow.' + this);
  }

  TextSelectionHandleType parseTextSelectionHandleType() {
    return TextSelectionHandleType.values
        .firstWhere((e) => e.toString() == 'TextSelectionHandleType.' + this);
  }

  TextWidthBasis parseTextWidthBasis() {
    return TextWidthBasis.values
        .firstWhere((e) => e.toString() == 'TextWidthBasis.' + this);
  }

  TileMode parseTileMode() {
    return TileMode.values
        .firstWhere((e) => e.toString() == 'TileMode.' + this);
  }

  TraversalDirection parseTraversalDirection() {
    return TraversalDirection.values
        .firstWhere((e) => e.toString() == 'TraversalDirection.' + this);
  }

  UnfocusDisposition parseUnfocusDisposition() {
    return UnfocusDisposition.values
        .firstWhere((e) => e.toString() == 'UnfocusDisposition.' + this);
  }

  VertexMode parseVertexMode() {
    return VertexMode.values
        .firstWhere((e) => e.toString() == 'VertexMode.' + this);
  }

  VerticalDirection parseVerticalDirection() {
    return VerticalDirection.values
        .firstWhere((e) => e.toString() == 'VerticalDirection.' + this);
  }

  WrapAlignment parseWrapAlignment() {
    return WrapAlignment.values
        .firstWhere((e) => e.toString() == 'WrapAlignment.' + this);
  }

  WrapCrossAlignment parseWrapCrossAlignment() {
    return WrapCrossAlignment.values
        .firstWhere((e) => e.toString() == 'WrapCrossAlignment.' + this);
  }

  DiagnosticsTreeStyle parseDiagnosticsTreeStyle() {
    return DiagnosticsTreeStyle.values
        .firstWhere((e) => e.toString() == 'DiagnosticsTreeStyle.' + this);
  }

  DragStartBehavior parseDragStartBehavior() {
    return DragStartBehavior.values
        .firstWhere((e) => e.toString() == 'DragStartBehavior.' + this);
  }

  GestureDisposition parseGestureDisposition() {
    return GestureDisposition.values
        .firstWhere((e) => e.toString() == 'GestureDisposition.' + this);
  }

  GestureRecognizerState parseGestureRecognizerState() {
    return GestureRecognizerState.values
        .firstWhere((e) => e.toString() == 'GestureRecognizerState.' + this);
  }

  PointerDeviceKind parsePointerDeviceKind() {
    return PointerDeviceKind.values
        .firstWhere((e) => e.toString() == 'PointerDeviceKind.' + this);
  }

  BottomNavigationBarLandscapeLayout parseBottomNavigationBarLandscapeLayout() {
    return BottomNavigationBarLandscapeLayout.values.firstWhere(
        (e) => e.toString() == 'BottomNavigationBarLandscapeLayout.' + this);
  }

  BottomNavigationBarType parseBottomNavigationBarType() {
    return BottomNavigationBarType.values
        .firstWhere((e) => e.toString() == 'BottomNavigationBarType.' + this);
  }

  ButtonBarLayoutBehavior parseButtonBarLayoutBehavior() {
    return ButtonBarLayoutBehavior.values
        .firstWhere((e) => e.toString() == 'ButtonBarLayoutBehavior.' + this);
  }

  ButtonTextTheme parseButtonTextTheme() {
    return ButtonTextTheme.values
        .firstWhere((e) => e.toString() == 'ButtonTextTheme.' + this);
  }

  CollapseMode parseCollapseMode() {
    return CollapseMode.values
        .firstWhere((e) => e.toString() == 'CollapseMode.' + this);
  }

  DatePickerEntryMode parseDatePickerEntryMode() {
    return DatePickerEntryMode.values
        .firstWhere((e) => e.toString() == 'DatePickerEntryMode.' + this);
  }

  DatePickerMode parseDatePickerMode() {
    return DatePickerMode.values
        .firstWhere((e) => e.toString() == 'DatePickerMode.' + this);
  }

  DayPeriod parseDayPeriod() {
    return DayPeriod.values
        .firstWhere((e) => e.toString() == 'DayPeriod.' + this);
  }

  DrawerAlignment parseDrawerAlignment() {
    return DrawerAlignment.values
        .firstWhere((e) => e.toString() == 'DrawerAlignment.' + this);
  }

  FloatingLabelBehavior parseFloatingLabelBehavior() {
    return FloatingLabelBehavior.values
        .firstWhere((e) => e.toString() == 'FloatingLabelBehavior.' + this);
  }

  HourFormat parseHourFormat() {
    return HourFormat.values
        .firstWhere((e) => e.toString() == 'HourFormat.' + this);
  }

  ListTileControlAffinity parseListTileControlAffinity() {
    return ListTileControlAffinity.values
        .firstWhere((e) => e.toString() == 'ListTileControlAffinity.' + this);
  }

  ListTileStyle parseListTileStyle() {
    return ListTileStyle.values
        .firstWhere((e) => e.toString() == 'ListTileStyle.' + this);
  }

  MaterialBannerClosedReason parseMaterialBannerClosedReason() {
    return MaterialBannerClosedReason.values.firstWhere(
        (e) => e.toString() == 'MaterialBannerClosedReason.' + this);
  }

  MaterialState parseMaterialState() {
    return MaterialState.values
        .firstWhere((e) => e.toString() == 'MaterialState.' + this);
  }

  MaterialTapTargetSize parseMaterialTapTargetSize() {
    return MaterialTapTargetSize.values
        .firstWhere((e) => e.toString() == 'MaterialTapTargetSize.' + this);
  }

  MaterialType parseMaterialType() {
    return MaterialType.values
        .firstWhere((e) => e.toString() == 'MaterialType.' + this);
  }

  NavigationDestinationLabelBehavior parseNavigationDestinationLabelBehavior() {
    return NavigationDestinationLabelBehavior.values.firstWhere(
        (e) => e.toString() == 'NavigationDestinationLabelBehavior.' + this);
  }

  NavigationRailLabelType parseNavigationRailLabelType() {
    return NavigationRailLabelType.values
        .firstWhere((e) => e.toString() == 'NavigationRailLabelType.' + this);
  }

  PopupMenuPosition parsePopupMenuPosition() {
    return PopupMenuPosition.values
        .firstWhere((e) => e.toString() == 'PopupMenuPosition.' + this);
  }

  RefreshIndicatorTriggerMode parseRefreshIndicatorTriggerMode() {
    return RefreshIndicatorTriggerMode.values.firstWhere(
        (e) => e.toString() == 'RefreshIndicatorTriggerMode.' + this);
  }

  ScriptCategory parseScriptCategory() {
    return ScriptCategory.values
        .firstWhere((e) => e.toString() == 'ScriptCategory.' + this);
  }

  ShowValueIndicator parseShowValueIndicator() {
    return ShowValueIndicator.values
        .firstWhere((e) => e.toString() == 'ShowValueIndicator.' + this);
  }

  SnackBarBehavior parseSnackBarBehavior() {
    return SnackBarBehavior.values
        .firstWhere((e) => e.toString() == 'SnackBarBehavior.' + this);
  }

  SnackBarClosedReason parseSnackBarClosedReason() {
    return SnackBarClosedReason.values
        .firstWhere((e) => e.toString() == 'SnackBarClosedReason.' + this);
  }

  StepperType parseStepperType() {
    return StepperType.values
        .firstWhere((e) => e.toString() == 'StepperType.' + this);
  }

  StepState parseStepState() {
    return StepState.values
        .firstWhere((e) => e.toString() == 'StepState.' + this);
  }

  StretchMode parseStretchMode() {
    return StretchMode.values
        .firstWhere((e) => e.toString() == 'StretchMode.' + this);
  }

  TabBarIndicatorSize parseTabBarIndicatorSize() {
    return TabBarIndicatorSize.values
        .firstWhere((e) => e.toString() == 'TabBarIndicatorSize.' + this);
  }

  ThemeMode parseThemeMode() {
    return ThemeMode.values
        .firstWhere((e) => e.toString() == 'ThemeMode.' + this);
  }

  Thumb parseThumb() {
    return Thumb.values.firstWhere((e) => e.toString() == 'Thumb.' + this);
  }

  TimeOfDayFormat parseTimeOfDayFormat() {
    return TimeOfDayFormat.values
        .firstWhere((e) => e.toString() == 'TimeOfDayFormat.' + this);
  }

  TimePickerEntryMode parseTimePickerEntryMode() {
    return TimePickerEntryMode.values
        .firstWhere((e) => e.toString() == 'TimePickerEntryMode.' + this);
  }

  TooltipTriggerMode parseTooltipTriggerMode() {
    return TooltipTriggerMode.values
        .firstWhere((e) => e.toString() == 'TooltipTriggerMode.' + this);
  }

  SpringType parseSpringType() {
    return SpringType.values
        .firstWhere((e) => e.toString() == 'SpringType.' + this);
  }

  CacheExtentStyle parseCacheExtentStyle() {
    return CacheExtentStyle.values
        .firstWhere((e) => e.toString() == 'CacheExtentStyle.' + this);
  }

  DebugSemanticsDumpOrder parseDebugSemanticsDumpOrder() {
    return DebugSemanticsDumpOrder.values
        .firstWhere((e) => e.toString() == 'DebugSemanticsDumpOrder.' + this);
  }

  PerformanceOverlayOption parsePerformanceOverlayOption() {
    return PerformanceOverlayOption.values
        .firstWhere((e) => e.toString() == 'PerformanceOverlayOption.' + this);
  }

  PlatformViewHitTestBehavior parsePlatformViewHitTestBehavior() {
    return PlatformViewHitTestBehavior.values.firstWhere(
        (e) => e.toString() == 'PlatformViewHitTestBehavior.' + this);
  }

  RenderAnimatedSizeState parseRenderAnimatedSizeState() {
    return RenderAnimatedSizeState.values
        .firstWhere((e) => e.toString() == 'RenderAnimatedSizeState.' + this);
  }

  ScrollDirection parseScrollDirection() {
    return ScrollDirection.values
        .firstWhere((e) => e.toString() == 'ScrollDirection.' + this);
  }

  SelectionEventType parseSelectionEventType() {
    return SelectionEventType.values
        .firstWhere((e) => e.toString() == 'SelectionEventType.' + this);
  }

  SelectionResult parseSelectionResult() {
    return SelectionResult.values
        .firstWhere((e) => e.toString() == 'SelectionResult.' + this);
  }

  SelectionStatus parseSelectionStatus() {
    return SelectionStatus.values
        .firstWhere((e) => e.toString() == 'SelectionStatus.' + this);
  }

  SchedulerPhase parseSchedulerPhase() {
    return SchedulerPhase.values
        .firstWhere((e) => e.toString() == 'SchedulerPhase.' + this);
  }

  DeviceOrientation parseDeviceOrientation() {
    return DeviceOrientation.values
        .firstWhere((e) => e.toString() == 'DeviceOrientation.' + this);
  }

  FloatingCursorDragState parseFloatingCursorDragState() {
    return FloatingCursorDragState.values
        .firstWhere((e) => e.toString() == 'FloatingCursorDragState.' + this);
  }

  KeyboardSide parseKeyboardSide() {
    return KeyboardSide.values
        .firstWhere((e) => e.toString() == 'KeyboardSide.' + this);
  }

  KeyDataTransitMode parseKeyDataTransitMode() {
    return KeyDataTransitMode.values
        .firstWhere((e) => e.toString() == 'KeyDataTransitMode.' + this);
  }

  MaxLengthEnforcement parseMaxLengthEnforcement() {
    return MaxLengthEnforcement.values
        .firstWhere((e) => e.toString() == 'MaxLengthEnforcement.' + this);
  }

  ModifierKey parseModifierKey() {
    return ModifierKey.values
        .firstWhere((e) => e.toString() == 'ModifierKey.' + this);
  }

  SystemSoundType parseSystemSoundType() {
    return SystemSoundType.values
        .firstWhere((e) => e.toString() == 'SystemSoundType.' + this);
  }

  SystemUiMode parseSystemUiMode() {
    return SystemUiMode.values
        .firstWhere((e) => e.toString() == 'SystemUiMode.' + this);
  }

  SystemUiOverlay parseSystemUiOverlay() {
    return SystemUiOverlay.values
        .firstWhere((e) => e.toString() == 'SystemUiOverlay.' + this);
  }

  BoxHeightStyle parseBoxHeightStyle() {
    return BoxHeightStyle.values
        .firstWhere((e) => e.toString() == 'BoxHeightStyle.' + this);
  }

  BoxWidthStyle parseBoxWidthStyle() {
    return BoxWidthStyle.values
        .firstWhere((e) => e.toString() == 'BoxWidthStyle.' + this);
  }

  ClipOp parseClipOp() {
    return ClipOp.values.firstWhere((e) => e.toString() == 'ClipOp.' + this);
  }

  DisplayFeatureState parseDisplayFeatureState() {
    return DisplayFeatureState.values
        .firstWhere((e) => e.toString() == 'DisplayFeatureState.' + this);
  }

  DisplayFeatureType parseDisplayFeatureType() {
    return DisplayFeatureType.values
        .firstWhere((e) => e.toString() == 'DisplayFeatureType.' + this);
  }

  FramePhase parseFramePhase() {
    return FramePhase.values
        .firstWhere((e) => e.toString() == 'FramePhase.' + this);
  }

  ImageByteFormat parseImageByteFormat() {
    return ImageByteFormat.values
        .firstWhere((e) => e.toString() == 'ImageByteFormat.' + this);
  }

  KeyEventType parseKeyEventType() {
    return KeyEventType.values
        .firstWhere((e) => e.toString() == 'KeyEventType.' + this);
  }

  PixelFormat parsePixelFormat() {
    return PixelFormat.values
        .firstWhere((e) => e.toString() == 'PixelFormat.' + this);
  }

  PointerChange parsePointerChange() {
    return PointerChange.values
        .firstWhere((e) => e.toString() == 'PointerChange.' + this);
  }

  PointerSignalKind parsePointerSignalKind() {
    return PointerSignalKind.values
        .firstWhere((e) => e.toString() == 'PointerSignalKind.' + this);
  }

  PointMode parsePointMode() {
    return PointMode.values
        .firstWhere((e) => e.toString() == 'PointMode.' + this);
  }

  HttpClientResponseCompressionState parseHttpClientResponseCompressionState() {
    return HttpClientResponseCompressionState.values.firstWhere(
        (e) => e.toString() == 'HttpClientResponseCompressionState.' + this);
  }
}
